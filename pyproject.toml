[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "financial_transformer"
version = "0.0.3"
description = "Commodity forecasting with PyTorch and uncertainty quantification"
readme = "README.md"
requires-python = ">=3.13"
authors = [
  {name = "John Hohman"}
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Science/Research",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.13"
]
dependencies = [
  "torch==2.7.0",
  "torchvision==0.22.0",
  "torchaudio==2.7.0",
  "numpy==2.2.6",
  "pandas==2.2.3",
  "tqdm==4.67.1",
  "matplotlib==3.10.3",
  "seaborn==0.13.2",
  "plotnine==0.14.5 ",
  "hydra-core==1.3.2",
  "scikit-learn==1.6.1",
  "statsmodels==0.14.4",
  "mlflow==2.22.0",
  "pytorch-lightning==2.5.1.post0",
  "polars==1.30.0",
  "pydantic==2.11.5",
  "toolz==1.0.0",
  "more-itertools==10.7.0",
  "dvc==3.59.2",
  "pre-commit==4.2.0",
  "ruff==0.11.11",
  "mypy==1.15.0",
  "nbqa==1.9.1",
  "nbstripout==0.8.1",
  "pytest==8.3.5",
  "pytest-cov==6.1.1",
  "detect-secrets==1.5.0",
  "pandas-stubs==2.2.3.250527 ",
  "jupyter==1.1.1",
  "ipykernel==6.29.5",
  "sympy==1.14.0"
]

[project.scripts]
coffee-train = "scripts.train:main"
coffee-forecast = "scripts.forecast:main"

[project.urls]
Homepage = "https://github.com/Jdrake4e/CoffeeGPT2"
Repository = "https://github.com/Jdrake4e/CoffeeGPT2.git"
Issues = "https://github.com/Jdrake4e/CoffeeGPT2/issues"

[tool.coverage]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:"
]

[tool.coverage.run]
source = ["src"]
omit = [
  "*/tests/*",
  "*/test_*",
  "*/__pycache__/*"
]

# TODO properly implement hatchling build configuration
[tool.hatch.build.targets.wheel]
# Tells Hatchling to take the contents of local 'src/' directory
# and package them as the 'financial_transformer' package in the wheel.
force-include = {"src/" = "financial_transformer/"}

[tool.mypy]
python_version = "3.13"
ignore_missing_imports = true
files = ["src/"]
disallow_untyped_defs = true
check_untyped_defs = true
warn_unused_ignores = true
warn_return_any = true
exclude = [
  "(?x)(^tests/|notebooks/|\\.venv/|__pycache__/|data/|logs/|outputs/)"
]

[[tool.mypy.overrides]]
module = [
  "torch.*",
  "pandas.*",
  "numpy.*",
  "matplotlib.*",
  "seaborn.*",
  "sklearn.*",
  "statsmodels.*",
  "mlflow.*",
  "pytorch_lightning.*"
]
ignore_missing_imports = true

[tool.nbqa.addopts]
ruff = ["--fix", "--exit-non-zero-on-fix"]

[tool.nbqa.config]
ruff = "pyproject.toml"
mypy = "pyproject.toml"

[tool.nbqa.mutate]
ruff = 1
ruff-format = 1

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
  "--verbose",
  "--cov=src",
  "--cov-report=term-missing",
  "--cov-report=html"
]

[tool.ruff]
line-length = 88
target-version = "py313"
exclude = [
  ".git",
  "__pycache__",
  ".ipynb_checkpoints",
  ".venv",
  "build",
  "dist",
  "data",
  "logs",
  "outputs"
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
select = [
  "D", # pydocstyle: enforce Google-style docstrings on modules/classes/functions
  "E", # pycodestyle errors: PEP 8 errors (e.g. E302, E305)
  "W", # pycodestyle warnings: PEP 8 warnings (e.g. W291 trailing whitespace)
  "F", # pyflakes: undefined names, unused variables/imports
  "I", # isort: import grouping and ordering
  "S", # security: flake8-bandit rules (e.g. use of eval, shell injection)
  "B", # bugbear: flake8-bugbear patterns (likely bugs/suboptimal code)
  "A", # builtins: flake8-builtins checks (shadowing Python builtins)
  "C", # comprehensions: flake8-comprehensions suggestions (simplify maps)
  "UP", # pyupgrade: modernize syntax (f-strings, remove u prefix, etc.)
  "RUF", # Ruff-specific rules (misc. stylistic and correctness checks)
  "N", # pep8-naming: naming conventions (CamelCase, snake_case, UPPER_CASE)
  "PT", # pytest-style: flake8-pytest-style for tests (use plain assert, etc.)
  "Q", # quotes: flake8-quotes checks (consistent single/double quotes)
  "SIM", # simplify: flake8-simplify suggestions (simpler idiomatic code)
  "TID", # tidy-imports: flake8-tidy-imports (no star imports, grouped imports)
  "ARG", # unused-arguments: flake8-unused-arguments (detect dead parameters)
  "BLE" # blind-except: flake8-blind-except (avoid bare except clauses)
]

[tool.ruff.lint.isort]
# known-first-party = ["src"] # TODO disabled until builder problem fixed
known-first-party = ["financial_transformer"]
force-sort-within-sections = true
split-on-trailing-comma = true

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "google"

[[tool.uv.index]]
name = "pytorch-cu128"
url = "https://download.pytorch.org/whl/cu128"
explicit = true

[[tool.uv.index]]
name = "nvidia"
url = "https://pypi.ngc.nvidia.com"
